services:
  mudur:
    user: &user "${UID}:${GID}"
    build:
      &build
      context: .
    expose:
      - 8080
    ports:
      - "8080:8080"
    depends_on:
      postgresql:
        condition: service_healthy
      mudur-prerun:
        condition: service_completed_successfully
    env_file:
      &env_file
      - ./.env
    volumes:
      &volumes
      - /home/bmericc/Dropbox/kamp-yazilimi/django_static:/app/mudur/staticfiles  # keep media files secure and ready to be shared with nginx
      - /home/bmericc/Dropbox/kamp-yazilimi/django_media:/app/mudur/media  # keep media files secure and ready to be shared with nginx
      - /home/bmericc/Dropbox/kamp-yazilimi/django_spool_cron:/var/spool/cron  # Remember crontab entries
    restart: on-failure
    healthcheck:
      test:
        [
          "CMD",
          "/usr/bin/curl",
          "--output",
          "/dev/null",
          "--silent",
          "--show-error",
          "--fail",
          "localhost:8080"
        ]
      interval: 30s
      timeout: 10s
      retries: 5

  mudur-prerun:
    user: *user
    build: *build
    env_file: *env_file
    volumes: *volumes
    entrypoint: [ "bash", "-c", "entrypoint.sh managepy migrate && entrypoint.sh managepy collectstatic --noinput && entrypoint.sh managepy compilemessages" ]
    depends_on:
      postgresql:
        condition: service_healthy

  postgresql:
    image: postgres:13
    tmpfs:
      - /run
      - /var/cache
    volumes:
      - /home/bmericc/Dropbox/kamp-yazilimi/postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_DB: "${POSTGRES_DB}"
    healthcheck:
      test:
        [
          "CMD",
          "psql",
          "--username",
          "${POSTGRES_USER}",
          "--command",
          "SELECT 1"
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "8432:5432"

